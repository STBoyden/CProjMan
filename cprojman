#!/usr/bin/env sh

begins_with() {
    case $2 in
        "$1"*)
            true;;
        *)
            false;;
    esac
}

run() {
    shift 1

    local subargs="$@"
    local mode="debug"
    local projectname=$(cat premake5.lua | egrep "project" | awk '{print $2}' | sed 's/"//g')

    for arg in $subargs; do 
        case $arg in
            -d|--debug)
                ;;
            -r|--release)
                mode="release"
                ;;
            *)
                echo "Invalid argument"
                ;;
        esac
    done


    echo ""
    ./bin/$mode/$projectname
}

build() {
    shift 1

    local subargs="$@"
    local makeargs=""
    local mode="debug"

    for arg in $subargs; do
        case $arg in
            -d|--debug)
                ;;
            -r|--release)
                makeargs="config=release"
                mode="release"
                ;;
            *)
                echo "Invalid argument"
                ;;
        esac
    done

    if [[ ! -f "premake5.lua" ]]; then
        echo "Could not find the required \"premake5.lua\" file. Please either create the file manually, or use this" \
             "script to do it automatically."
        exit
    fi

    local projectname="$(cat premake5.lua | grep "\sproject" | awk '{print $2}' | sed 's/"//g')"

    echo "----| Building in $mode mode |----"

    echo -n "Building Unix Makefiles using premake5..."
    premake5 gmake >/dev/null && echo "Done." || echo "Could not finish."
    echo -n "Cleaning any previous build artifacts..."
    make clean >/dev/null && echo "Done." || echo "Could not finish."
    echo -n "Building using make..."
    make $makeargs >/dev/null && echo "Done." || echo "Could not finish."
}

new() {
    local directory="$(echo $@ | awk '{print $2}')"
    local projectname="$directory"
    shift 2
    local subargs="$@"

    if begins_with "-" $directory; then
        echo "Not a valid directory."
        exit
    fi

    if [[ -d  $directory ]]; then
        echo "Cannot create directory \"$directory\", as it already exists. Please specify an empty directory."
        exit
    fi


    echo "----| Initialising project directory |----"

    echo -n "Cloning project template..."
    git clone "$REPO" $directory &>/dev/null && echo "Done." || echo "Could not complete."
    cd $directory
    echo -n "Cleaning template..."
    rm -rf .git &>/dev/null && echo "Done." || echo "Could not complete."

    for arg in $subargs; do
        case $arg in
            -l=*|--lang=*)
                local language="${arg#*=}"
                local extension=".c"
                shopt -s nocasematch
                case $language in
                    cpp|c++|cxx)
                        language="C++"
                        extension="cpp"
                        ;;
                    c)
                        language="C"
                        extension="c"
                        ;;
                    *)
                        echo "Unsupported language. Please use a supported language (C, C++)."
                        exit
                        ;;
                esac

                shopt -u nocasematch

                cd src 
                for file in *; do
                    mv $file ${file%.*}.$extension
                done
                cd ..

                sed -i "s/language \"C\"/language \"$language\"/g" premake5.lua
                sed -i "s/files { \"\*\*.c\"/files { \"\*\*.$extension\"/g" premake5.lua
                ;;
            -n=*|--name=*)
                projectname="${arg#*=}"
                ;;
        esac
    done

    sed -i "s/CProject/$projectname/g" premake5.lua

    echo -n "Initialising Git repository..."
    git init &>/dev/null && echo "Done." || echo "Could not complete."
    git add .
    git commit -m "Initial commit" &>/dev/null
}

clean() {
    echo "----| Cleaning project |----"

    if [[ ! -f "premake5.lua" ]]; then
        echo "Either not in project directory or \"premake5.lua\" has been removed."
        exit
    fi

    local to_delete=("bin" "obj" "CProject.make" "Makefile")

    for fd in ${to_delete[@]}; do
        rm -rf $fd
    done

    echo "Done."
}

print_help() {
    echo "USAGE: cprojman [SUBCOMMAND]"
    echo ""
    echo "Available subcommands:"
    echo "  - help: Print this help display."
    echo ""
    echo "  - new: Create a new C/C++ project."
    echo "      - USAGE: new [PROJECTDIR] [OPTIONS]"
    echo "      - OPTIONS:"
    echo "          - -l=X, --lang=X: Set the project language to X (C/C++)."
    echo "          - -n=X, --name=X: Set the project name to X."
    echo ""
    echo "  - run: Run the current C/C++ project."
    echo "      - USAGE: run [OPTIONS]"
    echo "      - OPTIONS:"
    echo "          - -d, --debug: Set the project to build and run in debug mode (default mode)."
    echo "          - -r, --release: Set the project to build and run in release mode."
    echo ""
    echo "  - build: Build the current C/C++ project."
    echo "      - USAGE: build [OPTIONS]"
    echo "      - OPTIONS:"
    echo "          - -d, --debug: Set the project to build in debug mode (default mode)."
    echo "          - -r, --release: Set the project to build in release mode."
    echo ""
    echo "  - clean: Cleans the current C/C++ project."
    echo "      - USAGE: clean"
    echo ""
}

IFS=' ' read -ra ARGUMENTS <<< "$@"
REPO="https://github.com/STBoyden/c-project-template"

command=${ARGUMENTS[0]}

case $command in
    help)
        print_help
        ;;
    build)
        build ${ARGUMENTS[@]}
        ;;
    run)
        build ${ARGUMENTS[@]} && run ${ARGUMENTS[@]}
        ;;
    clean)
        clean
        ;;
    new)
        new ${ARGUMENTS[@]}
        ;;
    "")
        print_help
        ;;
    *)
        echo "Could not find the command \"$command\"."
        echo ""
        print_help
        ;;
esac
