#!/bin/sh

begins_with() {
    case $2 in
        "$1"*)
            true;;
        *)
            false;;
    esac
}

run() {
    shift 1

    subargs="$@"
    mode="debug"
    projectname=$(cat premake5.lua | egrep "project" | awk '{print $2}' | sed 's/"//g')

    for arg in $subargs; do 
        case $arg in
            -d|--debug)
                ;;
            -r|--release)
                mode="release"
                ;;
            *)
                echo "Invalid argument"
                exit
                ;;
        esac
    done

    echo ""
    ./bin/$mode/$projectname
}

build() {
    shift 1

    subargs="$@"
    makeargs=""
    mode="debug"

    for arg in $subargs; do
        case $arg in
            -d|--debug)
                ;;
            -r|--release)
                makeargs="config=release"
                mode="release"
                ;;
            *)
                echo "Invalid argument"
                exit
                ;;
        esac
    done

    [ ! -f "premake5.lua" ] && { echo "Could not find the required \"premake5.lua\" file." ; exit ; }

    projectname="$(cat premake5.lua | grep "\sproject" | awk '{print $2}' | sed 's/"//g')"

    echo "----| Building in $mode mode |----"

    echo -n "Building Unix Makefiles using premake5..."
    premake5 gmake >/dev/null && echo "Done."
    echo -n "Cleaning any previous build artifacts..."
    make clean >/dev/null && echo "Done."
    echo -n "Building using make..."
    make $makeargs >/dev/null && echo "Done."
}

new() {
    directory="$(echo $@ | awk '{print $2}')"
    projectname="$directory"
    shift 2
    subargs="$@"

    begins_with "-" $directory && { echo "Not a valid directory." ; exit ; }

    [ -d $directory ] && { 
        echo "Cannot create directory \"$directory\", as it already exists. Please specify an empty directory." 
        exit 
    }

    echo "----| Initialising project directory |----"

    echo -n "Cloning project template..."
    git clone "$REPO" $directory >/dev/null 2>&1 && echo "Done."
    cd $directory
    echo -n "Cleaning template..."
    rm -rf .git >/dev/null && echo "Done."

    for arg in $subargs; do
        case $arg in
            -l=*|--lang=*)
                language="${arg#*=}"
                extension=".c"
                case $language in
                    cpp|c++|cxx)
                        language="C++"
                        extension="cpp"
                        ;;
                    c)
                        language="C"
                        extension="c"
                        ;;
                    *)
                        echo "Unsupported language. Please use a supported language (C, C++)."
                        exit
                        ;;
                esac

                cd src 
                for file in *; do
                    mv $file ${file%.*}.$extension
                done
                cd ..

                sed -i "s/language \"C\"/language \"$language\"/g" premake5.lua
                sed -i "s/files { \"\*\*.c\"/files { \"\*\*.$extension\"/g" premake5.lua
                ;;
            -n=*|--name=*)
                projectname="${arg#*=}"
                ;;
        esac
    done

    sed -i "s/CProject/$projectname/g" premake5.lua

    echo -n "Initialising Git repository..."
    git init >/dev/null && echo "Done."
    git add .
    git commit -m "Initial commit" >/dev/null
}

clean() {
    echo "----| Cleaning project |----"

    [ ! -f "premake5.lua" ] && { echo "Either not in project directory or \"premake5.lua\" has been removed." ; exit ; }

    to_delete="bin obj CProject.make Makefile"

    for fd in $to_delete; do
        rm -rf $fd
    done

    echo "Done."
}

print_help() {
    cat <<!
USAGE: cprojman [SUBCOMMAND]

Available subcommands:
  - help: Print this help display.

  - new: Create a new C/C++ project.
      - USAGE: new [PROJECTDIR] [OPTIONS]
      - OPTIONS:
          - -l=X, --lang=X: Set the project language to X (C/C++).
          - -n=X, --name=X: Set the project name to X.

  - run: Run the current C/C++ project.
      - USAGE: run [OPTIONS]
      - OPTIONS:
          - -d, --debug: Set the project to build and run in debug mode (default mode).
          - -r, --release: Set the project to build and run in release mode.

  - build: Build the current C/C++ project.
      - USAGE: build [OPTIONS]
      - OPTIONS:
          - -d, --debug: Set the project to build in debug mode (default mode).
          - -r, --release: Set the project to build in release mode.

  - clean: Cleans the current C/C++ project.
      - USAGE: clean
!
}

ARGUMENTS="$@"
REPO="https://github.com/STBoyden/c-project-template"

command=$1

case $command in
    help)
        print_help
        ;;
    build)
        build $ARGUMENTS
        ;;
    run)
        build $ARGUMENTS && run $ARGUMENTS
        ;;
    clean)
        clean
        ;;
    new)
        new $ARGUMENTS
        ;;
    "")
        print_help
        ;;
    *)
        echo "Could not find the command \"$command\"."
        echo ""
        print_help
        ;;
esac
